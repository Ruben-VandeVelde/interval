-- Facts about the dual space unit ball in a normed_space

import analysis.normed_space.hahn_banach.extension
import topology.basic

import max_log
import tactics
import topology

open complex (abs exp I log)
open filter (at_top)
open function (curry uncurry)
open metric (ball closed_ball sphere)
open set (range univ)
open topological_space (second_countable_topology)
open_locale real nnreal ennreal topology complex_conjugate
noncomputable theory

variables {G : Type} [normed_add_comm_group G]
variables {E : Type} [normed_add_comm_group E] [normed_space ‚ÑÇ E] [second_countable_topology E]

-- A nonconstructive function which extracts a dual vector exhibiting f x = ‚Äñx‚Äñ
def dual_vector (x : E) : E ‚ÜíL[‚ÑÇ] ‚ÑÇ := classical.some (exists_dual_vector'' ‚ÑÇ x)
lemma dual_vector_norm (x : E) : ‚Äñdual_vector x‚Äñ ‚â§ 1 := (classical.some_spec (exists_dual_vector'' ‚ÑÇ x)).1
lemma dual_vector_nnnorm (x : E) : ‚Äñdual_vector x‚Äñ‚Çä ‚â§ 1 := dual_vector_norm _
@[simp] lemma dual_vector_apply (x : E) : dual_vector x x = ‚Äñx‚Äñ := (classical.some_spec (exists_dual_vector'' ‚ÑÇ x)).2

lemma dual_vector_le (x y : E) : abs (dual_vector x y) ‚â§ ‚Äñy‚Äñ := begin
  rw ‚Üêcomplex.norm_eq_abs,
  calc ‚Äñdual_vector x y‚Äñ ‚â§ ‚Äñdual_vector x‚Äñ * ‚Äñy‚Äñ : (dual_vector x).le_op_norm y
  ... ‚â§ 1 * ‚Äñy‚Äñ : by bound [dual_vector_norm x]
  ... = ‚Äñy‚Äñ : by simp,
end

-- Dual vectors of a dense subset of E
def duals : ‚Ñï ‚Üí E ‚ÜíL[‚ÑÇ] ‚ÑÇ := Œª n, dual_vector (topological_space.dense_seq E n)

-- Lipschitz 0 functions are constant
lemma lipschitz_with.is_const {g : ‚Ñù ‚Üí ‚Ñù} (g0 : lipschitz_with 0 g) : ‚àÄ x y, g x = g y := begin
  intros x y, have h := g0 x y, simp at h, exact h,
end

lemma duals_bdd_above {g : ‚Ñù ‚Üí ‚Ñù} (gm : monotone g) (x : E)
    : bdd_above (range (Œª n, g ‚Äñduals n x‚Äñ)) := begin
  rw bdd_above_def, use [g ‚Äñx‚Äñ], simp, intro n, apply gm, apply dual_vector_le,
end

-- One-sided Lipschitz bounds on the reals
lemma lipschitz_with.le {f : G ‚Üí ‚Ñù} {k : ‚Ñù‚â•0} (fk : lipschitz_with k f) (x y : G) : f x ‚â§ f y + k * dist x y := begin
  calc f x = f y + (f x - f y) : by ring_nf
  ... ‚â§ f y + |f x - f y| : by bound
  ... = f y + dist (f x) (f y) : by rw real.dist_eq
  ... ‚â§ f y + k * dist x y : by bound [fk.dist_le_mul x y],
end 

-- Norms are suprs over duals (version with an arbitrary monotone + Lipschitz function)
lemma norm_eq_duals_supr' {g : ‚Ñù ‚Üí ‚Ñù} {k : nnreal} (gm : monotone g) (gk : lipschitz_with k g) (x : E)
    : g ‚Äñx‚Äñ = ‚®Ü n, g ‚Äñduals n x‚Äñ := begin
  by_cases k0 : k = 0, { rw k0 at gk, have g0 := gk.is_const 0, simp only [‚Üêg0 _, csupr_const] },
  have kp : 0 < (k : ‚Ñù), { simp only [nnreal.coe_pos], exact ne.bot_lt k0 },
  apply le_antisymm, {
    apply le_of_forall_pos_le_add, intros e ep,
    rcases metric.dense_range_iff.mp (topological_space.dense_range_dense_seq E) x (e/2/k) (by bound) with ‚ü®n,nx‚ü©,
    generalize hy : topological_space.dense_seq E n = y, rw hy at nx,
    have hn : duals n = dual_vector y := by rw [‚Üêhy,duals],
    have h := le_csupr (duals_bdd_above gm x) n,
    generalize hs : (‚®Ü n, g ‚Äñduals n x‚Äñ) = s,
    simp_rw [hs,hn] at h, clear hs hn hy, simp only [complex.norm_eq_abs] at h,
    have gk' : lipschitz_with k (Œª x, g (abs (dual_vector y x))), {
      have k11 : (k : ‚Ñù‚â•0) = k * 1 * 1 := by norm_num, rw k11,
      simp_rw ‚Üêcomplex.norm_eq_abs, apply (gk.comp lipschitz_with_one_norm).comp,
      exact (dual_vector y).lipschitz.weaken (dual_vector_nnnorm y),
    },
    calc g ‚Äñx‚Äñ ‚â§ g (‚Äñy‚Äñ) + (k * 1) * dist x y : @lipschitz_with.le E _ _ _ (gk.comp lipschitz_with_one_norm) x y
    ... ‚â§ g (‚Äñy‚Äñ) + (k * 1) * (e/2 / k) : by bound
    ... = g (‚Äñy‚Äñ) + k / k * e/2 : by ring
    ... ‚â§ g (‚Äñy‚Äñ) + 1 * e/2 : by bound
    ... = g (‚Äñy‚Äñ) + e/2 : by simp only [one_mul]
    ... = g (abs (dual_vector y y)) + e/2 : by simp only [dual_vector_apply, complex.abs_of_real, abs_norm]
    ... ‚â§ g (abs (dual_vector y x)) + k * dist y x + e/2 : by bound [gk'.le]
    ... ‚â§ s + k * dist y x + e/2 : by bound
    ... = s + k * dist x y + e/2 : by rw dist_comm
    ... ‚â§ s + k * (e/2 / k) + e/2 : by bound
    ... = s + k / k * e/2 + e/2 : by ring_nf
    ... ‚â§ s + 1 * e/2 + e/2 : by bound
    ... = s + e : by ring_nf,
  }, {
    apply csupr_le, intro n, apply gm, simp only [complex.norm_eq_abs], apply dual_vector_le,
  },
end

lemma norm_eq_duals_supr (x : E) : ‚Äñx‚Äñ = ‚®Ü n, ‚Äñduals n x‚Äñ := begin
  have h := norm_eq_duals_supr' (@monotone_id ‚Ñù _) lipschitz_with.id x, simp at h ‚ä¢, exact h,
end

lemma max_log_norm_eq_duals_supr (b : ‚Ñù) (x : E)
    : max_log b ‚Äñx‚Äñ = ‚®Ü n, max_log b ‚Äñduals n x‚Äñ :=
  norm_eq_duals_supr' (monotone_max_log b) (lipschitz_with.max_log b) x
  
-- Rewrite a ‚Ñï supr into a monotonic limit
lemma csupr.has_lim (s : ‚Ñï ‚Üí ‚Ñù) (ba : bdd_above (range s))
    : filter.tendsto (Œª n, partial_sups s n) at_top (ùìù (‚®Ü n, s n)) := begin
  rw metric.tendsto_at_top, intros e ep,
  generalize hb : (‚®Ü n, s n) - e = b,
  have bs : b < (‚®Ü n, s n), { rw ‚Üêhb, exact sub_lt_self _ (by bound) },
  rcases exists_lt_of_lt_csupr bs with ‚ü®N,sN‚ü©, simp at sN,
  use N, intros n nN, rw real.dist_eq, rw abs_lt, constructor, {
    simp, simp [‚Üêhb] at sN,
    calc supr s = supr s - e + e : by ring
    ... < s N + e : by bound
    ... ‚â§ partial_sups s n + e : by bound [le_partial_sups_of_le s nN]
    ... = e + partial_sups s n : by ring,
  }, {
    simp,
    have rs : partial_sups s n ‚â§ supr s := partial_sups_le _ _ _ (Œª a an, le_csupr ba a),
    calc partial_sups s n - supr s ‚â§ supr s - supr s : by bound
    ... = 0 : by ring
    ... < e : ep,
  },
end

lemma duals_lim_tendsto_max_log_norm (b : ‚Ñù) (x : E)
    : filter.tendsto (partial_sups (Œª k, max_log b ‚Äñduals k x‚Äñ)) at_top (ùìù (max_log b ‚Äñx‚Äñ)) := begin
  rw max_log_norm_eq_duals_supr, exact csupr.has_lim _ (duals_bdd_above (monotone_max_log _) _),
end

lemma max_log_norm_eq_duals_lim (b : ‚Ñù) (x : E)
    : max_log b ‚Äñx‚Äñ = lim at_top (partial_sups (Œª k, max_log b ‚Äñduals k x‚Äñ)) := begin
  have a := duals_lim_tendsto_max_log_norm b x,
  exact tendsto_nhds_unique a (tendsto_nhds_lim ‚ü®_,a‚ü©),
end